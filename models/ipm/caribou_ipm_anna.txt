model{
  #  Naming
  #  Names of parameters to be estimated contain a capitalized letter
  #  Names of data are all lower case e.g. aug, ptsd, r_prior
  #  Indexing attempts to always follow - Year, Age, Sex for parameters
  #  If fewer indices are needed they follow the same order despite
  #   omissions

  # Parameter names - monitored
  # N: total abundance
  # S: survival
  # R: recruitment

  # Prefixes
  # Ages
  # j - juvenile 6 months to 1.5 years of age
  # s - subadult 1.5 to 2.5 years of age
  # a - adult >= 2.5 years of age
  # Sex
  # f - female
  # m - male

  #  Priors
  #  Recruitment - [age, sex, mean:tau]
  R_mu ~ dnorm(r_prior[4,1,1], r_prior[4,1,2])T(-10,10)

  #  Survival
  #  Priors on survival, data index - [age, sex, mean:tau]
  #  First age class included in R
  jfS_mu ~ dnorm(s_prior[2,1,1], s_prior[2,1,2])T(-10,10) 
  safS_mu ~ dnorm(s_prior[3,1,1], s_prior[3,1,2])T(-10,10)
  samS_mu ~ dnorm(s_prior[3,2,1], s_prior[3,2,2])T(-10,10)
  afS_mu ~ dnorm(s_prior[4,1,1], s_prior[4,1,2])T(-10,10)
  amS_mu ~ dnorm(s_prior[4,2,1], s_prior[4,2,2])T(-10,10)

  # Priors and linear predictors
  # Generally the user can define these structures, but here 
  # we present the most complicated model to provide
  # added utility to the user 
  # Precision on random effects for time
  
  # Temporal variance terms for random effects
  sdR ~ dunif(0, 50)
  tauR <- 1/(sdR ^ 2)
  sdJ ~ dunif(0, 50)
  tauJ <- 1/(sdJ ^ 2)
  sdA ~ dunif(0, 50)
  tauA <- 1/(sdA ^ 2)

  # Linear predictors
  for(yr in 1:nyr){
    # Reproduction linear predictor
    R_yr[yr] ~ dnorm(0, tauR)T(-5,5)
    logit(R[yr]) <- R_mu + R_yr[yr]

    # Survival linear predictors
    # Age class 1 included in R, set to 0 for backwards compatibility
    # with JAGS < 4.0
    S[yr,1,1] <- 0
    S[yr,1,2] <- 0

    # Juvenile survival, time-varying, male and female equal
    J_yr[yr] ~ dnorm(0, tauJ)T(-5, 5)
    logit(S[yr,2,1]) <- jfS_mu + J_yr[yr]
    S[yr,2,2] <- S[yr,2,1]

    # SubAdult survival "constant" in time    # any particular reason?
    logit(S[yr,3,1]) <- safS_mu
    logit(S[yr,3,2]) <- samS_mu
    
    # Adult survival, different intercept and same temporal variation
    A_yr[yr] ~ dnorm(0, tauA)T(-5, 5)
    logit(S[yr,4,1]) <- afS_mu + A_yr[yr]
    logit(S[yr,4,2]) <- amS_mu + A_yr[yr] 
  }

  ###  Prior on first year population size
  # n1 is data containing guess at first year population size
  # Initial population size arbitrarily set to a Poisson like value 
  #  where the variance is defined as 20 * mean to admit that extra
  #  variation exists
  # Parameter Indexing - Year, Age, Sex
  # Data indexing - Age, Sex
  N[1,1,1] ~ dnorm(n1[1,2], 1/(20 * n1[1,2]))T(0,)
  N[1,1,2] <- N[1,1,1]

  for(s in 1:2){
    N[1,2,s] ~ dnorm(n1[2,s+1], 1/(20 * n1[2,s+1]))T(0,)
    N[1,3,s] ~ dnorm(n1[3,s+1], 1/(20 * n1[3,s+1]))T(0,)
    N[1,4,s] ~ dnorm(n1[4,s+1], 1/(20 * n1[4,s+1]))T(0,)
  }

  yN[1] <- N[1,1,1] + N[1,1,2]
  totF[1] <- N[1,1,1] + N[1,2,1] + N[1,3,1] + N[1,4,1]
  totM[1] <- N[1,1,2] + N[1,2,2] + N[1,3,2] + N[1,4,2]
  totN[1] <- totF[1] + totM[1]

  ###  Process model - 4 ages, 2 sex
  #  Sex = 1 is a female, 2 is male
  #  Indexing follows - Year, Age, Sex
  #  Data unique to process model 
  #   ptsd: post-translocation survival depression rate
  #   aug: population augmentation - number of animals added

  # Note: when running our model, we used Normal approximations of the 
  # Poisson and Binomial models. We show the original poisson and
  # Binomial models here for brevity and clarity 

  for(yr in 2:nyr){
    #  Calves
    N[yr,1,1] ~ dpois((N[1,3,1] + N[1,4,1]) * R[yr] * 0.5)  # so n_calves always depends on adult abundance in year 1???
    N[yr,1,2] <- nMu[yr,1,1]   # where is nMu[yr,1,1] assigned?

    for(s in 1:2){
      #  Juveniles - 6 - 18 months of age
      nMu[yr,2,s] ~ dbin(S[yr-1,2,s], N[yr-1,1,s]) 

      nAug[yr,2,s] ~ dbin(S[yr-1,2,s] * ptsd, aug[yr-1,1,s])

      N[yr,2,s] <- nMu[yr,2,s] + nAug[yr,2,s]  

      # SubAdults
      nMu[yr,3,s] ~ dbin(S[yr-1,3,s], N[yr-1,2,s])

      nAug[yr,3,s] ~ dbin(S[yr-1,3,s] * ptsd, aug[yr-1,2,s])

      N[yr,3,s] <- nMu[yr,3,s] + nAug[yr,3,s]       

      #  Adults
      nMu[yr,4,s] ~ dbin(S[yr-1,4,s], N[yr-1,3,s] + N[yr-1,4,s])

      nAug[yr,4,s] ~ dbin(S[yr-1,4,s] * ptsd, aug[yr-1,3,s] + aug[yr-1,4,s])

      N[yr,4,s] <- nMu[yr,4,s] + nAug[yr,4,s]  

    }

    #  Totals in each year
    yN[yr] <- N[yr,1,1] + N[yr,1,2]
    totF[yr] <- N[yr,1,1] + N[yr,2,1] + N[1,3,1] + N[1,4,1]
    totM[yr] <- N[yr,1,2] + N[yr,2,2] + N[yr,3,2] + N[yr,4,2]
    totN[yr] <- totF[yr] + totM[yr]

}

  ####################  Observation Models
  # Data are arranged with one observation per row. 
  # In the code that follows, every observation is index by row [i]
  # Observation (data) indexing/columns always follows
  #    1   2     3    4    5    
  #  Year, Age, Sex, Mean, Tau

  #  Abundance Observation (Lincoln-Petersen) - [yr]
  for(i in 1:nn){
    ndat[i,4] ~ dnorm(totN[ndat[i,1]], ndat[i,5])T(0,)
  }

  #  Minimum counts - [yr]
  r ~ dunif(0, 5000)

  for(i in 1:nmin){
    mu[i] <- r/(r + totN[mindat[i,2]])
    mindat[i,4] ~ dnegbin(mu[i], r) 
  }

  #  Scat Abundance Males - [yr]
  for(i in 1:nnm){
    nmdat[i,4] ~ dnorm(totM[nmdat[i,1]], nmdat[i,5])
  }

  #  Scat Abundance Females - [yr]
  for(i in 1:nnf){
    nfdat[i,4] ~ dnorm(totF[nfdat[i,1]], nfdat[i,5])
  }

  #  Calf:Cow Ratio Observations - [yr]
  for(i in 1:nyf){
    yfdat[i,4] ~ dnorm(yfRat[yfdat[i,1]], yfdat[i,5])
  }

  #  Survival Observations (known fate telemetry) - [yr,age,sex]
  for(i in 1:ns){
    sdat[i,4] ~ dnorm(S[sdat[i,1], 4, 1], sdat[i,5])T(0,1)
  }

  #  Scat Survival Observations - [yr,age,sex]
  for(i in 1:nss){
    ssdat[i,4] ~ dnorm(S[ssdat[i,1], ssdat[i,3], ssdat[i,4]], ssdat[i,5])T(0,1)
  }

  # Derive age and sex ratios from abundance parameter estimates
  # Age ratio (yfRat), total young/females 1.5 and older 
  # Sex ratio (mfRat), total males/total females
  for(u in 1:ndau){
    for(yr in 1:nyr){
      yfRat[u,yr] <- yN[yr]/(N[yr,2,1] + N[yr,3,1] + N[yr,4,1])
    }
  }

  #  Incomplete vectors cannot be monitored in JAGS < 4.0, so 
  #  aribitrary value of 1 is given to the first year
  lambda[1] <- 1
  for(yr in 2:nyr){
    lambda[yr] <- totF[yr]/totF[yr-1]
  }
} # end model definition