model{
# Test A - 21june2024
# Counts based on posterior distribution of p from cjs model - still use est. N
# Use a deterministic model for the population process - 
  # e.g., the expected value is the value actually generated
  # all noise comes from the parameters, not process noise


# IPM -- Built for the Starkey elk population
  # Kenneth Loonam
  
  # Parameters to estimate:
  # R: recruitment
  # S: survival
  # N: abundance
  
  # indexing follows [age, sex, year] unless otherwise specified
  # e.g: N[a,x,yr] -- abundance of age class a, sex x, in year yr
  # ages:
  #   [1,,]: 0.5 yr -- calf
  #   [2,,]: 1.5 yr -- subadult
  #   [3,,]: 2.5 yr -- adult - young
  #   [4,,]: 3.5+yr -- adult - mature
  # sex:
  #   [,1,]: female
  #   [,2,]: male
  
  # Estimated parameters are *CAPITALIZED*
  # Data objects are *lowercase*
  # Exceptions are intermediate parameters (e.g. random effects)
  

  #Process Model================================================================
  
  for(t in 2:n_year){ # t
    ##### Recruitment #####
    # R indexing follows [age,yr]  . . .  males rarely get pregnant
    # Assumes equal sex ratio from birth to age 0.5 years
    
    Ne[1,1,t] <- R[t] * sum(N[2:4,1,t]) * 0.5
    Te[1,1,t] <- abs(1 / ((Ne[1,1,t]) * (1 - R[t])+1))
    
    N[1,1,t] <- Ne[1,1,t]
    N[1,2,t] <- N[1,1,t]
    
    for(x in 1:2){ # x (sex)
      ##### Survival #####
      # Sexes have separate survivals except in 0.5 to 1.5 transition
      # All ages have separate survivals except 2.5 to 3.5 and 3.5+ (ages 3 & 4)
      # indexing follows [age, sex, year]
      
      # approximate proportion of aults in each age class
      prop_ad[1,x,t] <- 0
      prop_ad[2,x,t] <- N[1,x,t-1] / sum(N[1:4,x,t-1])
      prop_ad[3,x,t] <- N[2,x,t-1] / sum(N[1:4,x,t-1])
      prop_ad[4,x,t] <- sum(N[3:4,x,t-1]) / sum(N[1:4,x,t-1])
      
      for(a in 1:4){
        # minimum adults and adults moved broken down by age classes 
        # assumed proportional to corresponding age classes in yr-1
        Naug_min[a,x,t] <- min_ad[x,t]  * prop_ad[a,x,t] + n_har[a,x,t]
        n_ad_mov[a,x,t] <- n_a_mov[x,t] * prop_ad[a,x,t]
      } # a (age)
      
      # Maximum number of adults possible at start of hunting season
      Naug_max[2,x,t] <- N[1,x,t-1] +            n_c_mov[x,t]       
      Naug_max[3,x,t] <- N[2,x,t-1] +            n_ad_mov[2,x,t]    
      Naug_max[4,x,t] <- sum(N[3:4,x,t-1]) + sum(n_ad_mov[3:4,x,t]) 
      
      # Expected number of adults at start of hunting season
      Ne[2,x,t] <- Naug_max[2,x,t] * S[2,x,t]
      Ne[3,x,t] <- Naug_max[3,x,t] * S[3,x,t]
      Ne[4,x,t] <- Naug_max[4,x,t] * S[4,x,t]
      
      # Expected to survive ignoring management (for calculating lambda)
      n_x_l[2,x,t] <- N[1,x,t-1]        * S[2,x,t]
      n_x_l[3,x,t] <- N[2,x,t-1]        * S[3,x,t]
      n_x_l[4,x,t] <- sum(N[3:4,x,t-1]) * S[4,x,t]
      
      for(a in 2:4){
        #Te[a,x,t] <- abs(1 / ((Ne[a,x,t]) * (1 - S[a,x,t])))
        Naug[a,x,t] <- Ne[a,x,t]
        N[a,x,t] <- Naug[a,x,t] - n_har[a,x,t]
      } # a (age)
    } # x (sex)
    
    ##### Abundance #####
    # Derived values from process each year
    # Add whatever totals are interesting
    N_c[t]    <- N[1,1,t] + N[1,2,t]
    N_yf[t]   <- N[2,1,t]
    N_ym[t]   <- N[2,2,t]
    N_af[t]   <- N[3,1,t] + N[4,1,t]
    N_am[t]   <- N[3,2,t] + N[4,2,t]
    N_f[t]    <- N[3,1,t] + N[4,1,t] + N[2,1,t]
    N_m[t]    <- N[3,2,t] + N[4,2,t] + N[2,2,t]
    N_tot[t]  <- sum(N[,,t])
    
    N_lam[t]  <- N_c[t] + sum(n_x_l[2:4,1:2,t])
    
    lambda[t] <- N_lam[t] / N_tot[t-1]
    pop_r[t]  <- log(lambda[t])
  } # t
  mean_pop_r <- mean(pop_r[2:n_year])
  
  #Observation Models===========================================================
  
  # Data are indexed by row (i), with one observation per row
  # The columns for the data follow [year, age, sex, mean, tau]
    # data[i,1] = year of first row of data
    # data[i,4] = mean (estimate) of first row of data
  # For example n_sight[3,4] is the mean sightability for the third observation
  
  ##### Abundance #####
  # Sightability & C/R
  for(i in 1:nn_ca){
    n_sight_ca[i,4] ~ dnorm(N_c[n_sight_ca[i,1]], n_sight_ca[i,5])T(0,)
  }
  for(i in 1:nn_af){
    n_sight_af[i,4] ~ dnorm(N_f[n_sight_af[i,1]], n_sight_af[i,5])T(0,)
  }
  for(i in 1:nn_am){
    n_sight_am[i,4] ~ dnorm(N_m[n_sight_am[i,1]], n_sight_am[i,5])T(0,)
  }
  
  ##### Counts #####
  # p_cjs follows normal column rules:
    # (1)year, (2)age, (3)sex, (4)mean, (5)tau, and adds (6)count, (7/8)95% CRI
  for(i in 1:nn_count){
    PB0[i] ~ dnorm(p_cjs[i,4], p_cjs[i,5])T(p_cjs[i,7], p_cjs[i,8])
    logit(P[i]) <- PB0[i]
    exp_ct[i] <- P[i] * sum(N[2:4, p_cjs[i,3], p_cjs[i,1]])
    tau_ct[i] <- 1 / (exp_ct[i] * (1 - P[i]))
    
    p_cjs[i,6] ~ dnorm(exp_ct[i], tau_ct[i])T(0,)
  }
  
  ##### Survival #####
  # CJS - Feedgrounds
  #for(i in 1:ns){
  #  s_cjs[i,4] ~ dnorm(S[s_cjs[i,2], s_cjs[i,3], s_cjs[i,1]], s_cjs[i,5])T(0,1)
  #}
  for(i in 1:n_ind){
    for(yr in (f[i]+1):l[i]){
      # Setting Probabilities
      logit(p[i,yr]) <- PF_B0[yr] * female[i,yr-1] + 
        PM_B0[yr] * male[i,yr-1] + 
        P__Bhe * herd[i,yr-1]
      logit(s_it[i,yr]) <- (S_F_B0 + S_F_yr[yr]) * female[i,yr-1] +
        (S_M_B0 + S_M_yr[yr]) * male[i,yr-1] +
        S_C_B_yr[yr] * calf[i,yr-1] +
        S__Bhe * herd[i,yr-1]
     
      # State Process ------- alive >>> z = 1
      z[i,yr] ~ dbern(s_it[i,yr] * z[i,yr-1])
      # Observation Process ------- seen >>> y = 1
      y[i,yr] ~ dbern(p[i,yr] * z[i,yr])
    }
  }
  
  ##### Recruitment #####
  # Ratio - Feedgrounds
  #for(i in 1:nr){
  #  r_ratio[i,4] ~ dnorm(R[r_ratio[i,1]], r_ratio[i,5])T(0,1)
  #}
  for(i in 1:n_R_data){ # loop over number of observations of recruitment
    # columns of r_data are: year, calves, cows
    # each row of r_data is a year
    r_data[i,2] ~ dbinom(R[r_data[i,1]], r_data[i,3])
  }
  
  #Priors and GLMs==============================================================
  
  ##### Recruitment #####
  # random effect on year
  
  sd_R ~ dnorm(0, 0.25)T(0, 5) # SD and precision for random effect by year
  tau_R <- 1/sd_R^2
  
  R_B0 ~ dlogis(0, 1)T(-2, 2) # Covariates on recruitment for:
  R_wt ~ dlogis(0, 1)T(-2, 2) # weather in year t (PDSI, NDVI, rainfall, temperature)
  R_wm ~ dlogis(0, 1)T(-2, 2) # weather in year t - 1
  R_cg ~ dlogis(0, 1)T(-2, 2) # cougar index
  R_dd ~ dlogis(0, 1)T(-2, 2) # female elk density in year t - 1
  
  for(yr in 2:n_year){ # yr
    R_yr[yr] ~ dnorm(0, tau_R)T(-2, 2) # random effect by year
    # GLM for annual recruitment (R[yr])
    logit(R[yr]) <- R_B0 + 
                    R_wt * clim[yr] + 
                    R_wm * clim[yr-1] + 
                    R_dd * n_adj[yr-1] + 
                    R_cg * cdens[yr] +
                    R_yr[yr]
  } # yr
  
  
  ##### Survival #####
  # Independent calf, yearling, and adult survival
  # Sex effect on non-calves, sex survival equal in calves
  # Separate random effect on each sex/age class
    # _C_ = calf, survival from 0.5 to 1.5
    # _Y_ = yearling, survival from 1.5 to 2.5
    # _A_ = adult, all other age steps
    # _F_ = female, _M_ = male
  # Keeping all of this longhand to facilitate informative priors later on
  S_C_B0 ~ dlogis(0, 1)T(-3, 3)
  S_F_B0 ~ dlogis(2.53, .38)T(-1, )
  S_M_B0 ~ dlogis(1.47, .34)T(-1, )
 
  S_wt ~ dlogis(0, 1)T(-2, 2) # weather in year t (PDSI, NDVI, rainfall, temperature)
  S_wm ~ dlogis(0, 1)T(-2, 2) # weather in year t - 1
  S_cg ~ dlogis(0, 1)T(-2, 2) # cougar index
  S_dd ~ dlogis(0, 1)T(-2, 2) # female elk density in year t - 1 
 
  sd_S_C ~ dnorm(0, 0.25)T(0, 5)
  sd_S_F ~ dnorm(0.83, 45.64)T(0, 5)
  sd_S_M ~ dnorm(0.84, 33.50)T(0, 5)
  
  tau_S_C <- 1/sd_S_C^2
  tau_S_F <- 1/sd_S_F^2
  tau_S_M <- 1/sd_S_M^2
  
  # Random intercept setup -- Detection probability
  PF_B0_mean ~ dlogis(0, 1)T(-2, 2)
  PM_B0_mean ~ dlogis(0, 1)T(-2, 2)
  PF_B0_sd ~ dnorm(0, 0.25)T(0, 5)
  PM_B0_sd ~ dnorm(0, 0.25)T(0, 5)
  PF_B0_tau <- 1 / PF_B0_sd^2
  PM_B0_tau <- 1 / PM_B0_sd^2
  P__Bhe ~ dlogis(0, 1)T(-2, 2) # effect of herd on detectin probability
  S__Bhe ~ dlogis(0, 1)T(-2, 2) # effect of herd on survival probability
  
  for(yr in 2:n_year){ # yr
    # Survival for age class 1 is not used in the process model
    # The probabilities read as p(surviving to age class ____)
    # p(surviving to 0.5 yr) is absorbed in the recruitment term
    S[1,1,yr] <- 0
    S[1,2,yr] <- 0
    
    # Survival from 0.5 to 1.5 years (to age class 2)
    # Random effect on year, male/female equal
    S_C_yr[yr] ~ dnorm(0, tau_S_C)T(-3, 3)
    S_C_B_yr[yr] <- S_C_B0 + 
                      S_wt * clim[yr] + 
                      S_wm * clim[yr-1] + 
                      S_dd * n_adj[yr-1] + 
                      S_cg * cdens[yr] +
                      S_C_yr[yr]
    logit(S[2,1,yr]) <- S_C_B_yr[yr]
    S[2,2,yr] <- S[2,1,yr]
    
    # Survival from 1.5 to 2.5 years (to age class 3)
    # Separate random effects by year for both males and females
    S_F_yr[yr] ~ dnorm(0, tau_S_F)
    S_M_yr[yr] ~ dnorm(0, tau_S_M)
    logit(S[3,1,yr]) <- S_F_B0 + S_F_yr[yr]
    logit(S[3,2,yr]) <- S_M_B0 + S_M_yr[yr]
    S[4,1,yr] <- S[3,1,yr]
    S[4,2,yr] <- S[3,2,yr]
    
    # Derived survivals for easy tracking
    S_f[yr] <- S[3,1,yr]
    S_m[yr] <- S[3,2,yr]
    S_c[yr] <- S[2,1,yr]
    
    # Detection probability of males and females in cjs model
    PM_B0[yr] ~ dnorm(PM_B0_mean, PM_B0_tau)T(-5, 5)
    PF_B0[yr] ~ dnorm(PF_B0_mean, PF_B0_tau)T(-5, 5)
    logit(PF[yr]) <- PF_B0[yr]
    logit(PM[yr]) <- PM_B0[yr]
  } # yr
  
  ##### Abundance -- starting #####
  # can adjust this later on to take opinions on initial population size
    # to make informative priors
  
  for(x in 1:2){ # x
    for(a in 1:4){ # a
      init_N[a,x] ~ dnorm(est_n1[a,x], 0.0001)T(min_n1[a,x],)
      N[a,x,1] <- round(init_N[a,x])
    } # a
  } # x
  
  # Derived Values for easier tracking
  N_c [1]  = N[1,1,1] + N[1,2,1]
  N_f[1]   = N[3,1,1] + N[4,1,1] + N[2,1,1]
  N_m[1]   = N[3,2,1] + N[4,2,1] + N[2,2,1]
  N_tot[1] = sum(N[1:4,1:2,1])
  
  logit(R_mean)   = R_B0
  logit(S_F_mean) = S_F_B0 
  logit(S_M_mean) = S_M_B0
  logit(S_C_mean) = S_C_B0
  LAMBDA_mean     = mean(lambda[2:n_year])
}